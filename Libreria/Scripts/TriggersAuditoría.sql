--Trigger INSERT para LB.Person
CREATE OR REPLACE TRIGGER Person_OnInsert
BEFORE INSERT ON LB.Person
REFERENCING NEW AS NEW
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.CREATEDON  FROM DUAL;
  SELECT USER INTO :NEW.CREATEDBY FROM dual; 
END;

--Trigger UPDATE para LB.Person
CREATE OR REPLACE TRIGGER Person_OnUpdate
BEFORE UPDATE ON LB.Person
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.UPDATEDON  FROM DUAL;
  SELECT USER INTO :NEW.UPDATEDBY FROM dual; 
END;

--Trigger INSERT para LB.Email
CREATE OR REPLACE TRIGGER Email_OnInsert
BEFORE INSERT ON LB.Email
REFERENCING NEW AS NEW
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.CREATEDON  FROM DUAL;
  SELECT USER INTO :NEW.CREATEDBY FROM dual; 
END;

--Trigger UPDATE para LB.Email
CREATE OR REPLACE TRIGGER Email_OnUpdate
BEFORE UPDATE ON LB.Email
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.UPDATEDON  FROM DUAL;
  SELECT USER INTO :NEW.UPDATEDBY FROM dual; 
END;

--Trigger INSERT para LB.Address
CREATE OR REPLACE TRIGGER Address_OnInsert
BEFORE INSERT ON LB.Address
REFERENCING NEW AS NEW
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.CREATEDON  FROM DUAL;
  SELECT USER INTO :NEW.CREATEDBY FROM dual; 
END;

--Trigger UPDATE para LB.Address
CREATE OR REPLACE TRIGGER Address_OnUpdate
BEFORE UPDATE ON LB.Address
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.UPDATEDON  FROM DUAL;
  SELECT USER INTO :NEW.UPDATEDBY FROM dual; 
END;

--Trigger INSERT para LB.Person_Type
CREATE OR REPLACE TRIGGER PersonType_OnInsert
BEFORE INSERT ON LB.Person_Type 
REFERENCING NEW AS NEW
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.CREATEDON  FROM DUAL;
  SELECT USER INTO :NEW.CREATEDBY FROM dual; 
END;

--Trigger UPDATE para LB.Person_Type
CREATE OR REPLACE TRIGGER PersonType_OnUpdate
BEFORE UPDATE ON LB.Person_Type
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.UPDATEDON  FROM DUAL;
  SELECT USER INTO :NEW.UPDATEDBY FROM dual; 
END;

--Trigger INSERT para LB.Loan_Control
CREATE OR REPLACE TRIGGER LoanControl_OnInsert
BEFORE INSERT ON LB.Loan_Control
REFERENCING NEW AS NEW
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.CREATEDON  FROM DUAL;
  SELECT USER INTO :NEW.CREATEDBY FROM dual; 
END;

--Trigger UPDATE para LB.Loan_Control
CREATE OR REPLACE TRIGGER LoanControl_OnUpdate
BEFORE UPDATE ON LB.Loan_Control
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.UPDATEDON  FROM DUAL;
  SELECT USER INTO :NEW.UPDATEDBY FROM dual; 
END;

--Trigger INSERT para LB.Item
CREATE OR REPLACE TRIGGER Item_OnInsert
BEFORE INSERT ON LB.Item
REFERENCING NEW AS NEW
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.CREATEDON  FROM DUAL;
  SELECT USER INTO :NEW.CREATEDBY FROM dual; 
END;

--Trigger UPDATE paraLB.Item
CREATE OR REPLACE TRIGGER Item_OnUpdate
BEFORE UPDATE ON LB.Item
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.UPDATEDON  FROM DUAL;
  SELECT USER INTO :NEW.UPDATEDBY FROM dual; 
END;

--Trigger INSERT para LB.Book
CREATE OR REPLACE TRIGGER Book_OnInsert
BEFORE INSERT ON LB.Book
REFERENCING NEW AS NEW
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.CREATEDON  FROM DUAL;
  SELECT USER INTO :NEW.CREATEDBY FROM dual; 
END;

--Trigger UPDATE para LB.Book
CREATE OR REPLACE TRIGGER Book_OnUpdate
BEFORE UPDATE ON LB.Book
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.UPDATEDON  FROM DUAL;
  SELECT USER INTO :NEW.UPDATEDBY FROM dual; 
END;

--Trigger INSERT para LB.Book_Clasification
CREATE OR REPLACE TRIGGER BookClasification_OnInsert
BEFORE INSERT ON LB.Book_Clasification
REFERENCING NEW AS NEW
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.CREATEDON  FROM DUAL;
  SELECT USER INTO :NEW.CREATEDBY FROM dual; 
END;

--Trigger UPDATE para LB.Book_Clasification
CREATE OR REPLACE TRIGGER BookClasification_OnUpdate
BEFORE UPDATE ON LB.Book_Clasification
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.UPDATEDON  FROM DUAL;
  SELECT USER INTO :NEW.UPDATEDBY FROM dual; 
END;

--Trigger INSERT para LB.Videogame
CREATE OR REPLACE TRIGGER Videogame_OnInsert
BEFORE INSERT ON LB.Videogame
REFERENCING NEW AS NEW
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.CREATEDON  FROM DUAL;
  SELECT USER INTO :NEW.CREATEDBY FROM dual; 
END;

--Trigger UPDATE para LB.Videogame
CREATE OR REPLACE TRIGGER Videogame_OnUpdate
BEFORE UPDATE ON LB.Videogame
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.UPDATEDON  FROM DUAL;
  SELECT USER INTO :NEW.UPDATEDBY FROM dual; 
END;

--Trigger INSERT para LB.Movie
CREATE OR REPLACE TRIGGER Movie_OnInsert
BEFORE INSERT ON LB.Movie
REFERENCING NEW AS NEW
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.CREATEDON  FROM DUAL;
  SELECT USER INTO :NEW.CREATEDBY FROM dual; 
END;

--Trigger UPDATE para LB.Movie
CREATE OR REPLACE TRIGGER Movie_OnUpdate
BEFORE UPDATE ON LB.Movie
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.UPDATEDON  FROM DUAL;
  SELECT USER INTO :NEW.UPDATEDBY FROM dual; 
END;

--Trigger INSERT para LB.Genre
CREATE OR REPLACE TRIGGER Genre_OnInsert
BEFORE INSERT ON LB.Genre
REFERENCING NEW AS NEW
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.CREATEDON  FROM DUAL;
  SELECT USER INTO :NEW.CREATEDBY FROM dual; 
END;

--Trigger UPDATE para LB.Genre
CREATE OR REPLACE TRIGGER Genre_OnUpdate
BEFORE UPDATE ON LB.Genre
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.UPDATEDON  FROM DUAL;
  SELECT USER INTO :NEW.UPDATEDBY FROM dual; 
END;

--Trigger INSERT para LB.Magazine
CREATE OR REPLACE TRIGGER Magazine_OnInsert
BEFORE INSERT ON LB.Magazine
REFERENCING NEW AS NEW
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.CREATEDON  FROM DUAL;
  SELECT USER INTO :NEW.CREATEDBY FROM dual; 
END;

--Trigger UPDATE para LB.Magazine
CREATE OR REPLACE TRIGGER Magazine_OnUpdate
BEFORE UPDATE ON LB.Magazine
FOR EACH ROW

BEGIN
  SELECT CURRENT_DATE SESSIONTIMEZONE INTO :NEW.UPDATEDON  FROM DUAL;
  SELECT USER INTO :NEW.UPDATEDBY FROM dual; 
END;